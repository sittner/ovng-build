diff -Naur linux-4.19.31-ti-r18.orig/sound/soc/codecs/Kconfig linux-4.19.31-ti-r18/sound/soc/codecs/Kconfig
--- linux-4.19.31-ti-r18.orig/sound/soc/codecs/Kconfig	2019-04-10 23:46:55.000000000 +0200
+++ linux-4.19.31-ti-r18/sound/soc/codecs/Kconfig	2019-05-21 21:17:18.864803760 +0200
@@ -748,7 +748,7 @@
 	select REGMAP_SPI
 
 config SND_SOC_PCM5102A
-	tristate
+	tristate "Texas Instruments PCM5102A CODECs"
 
 config SND_SOC_PCM512x
 	tristate
diff -Naur linux-4.19.31-ti-r18.orig/sound/soc/codecs/pcm5102a.c linux-4.19.31-ti-r18/sound/soc/codecs/pcm5102a.c
--- linux-4.19.31-ti-r18.orig/sound/soc/codecs/pcm5102a.c	2019-04-10 23:46:55.000000000 +0200
+++ linux-4.19.31-ti-r18/sound/soc/codecs/pcm5102a.c	2019-05-21 21:18:46.661754853 +0200
@@ -17,9 +17,29 @@
 #include <linux/init.h>
 #include <linux/module.h>
 #include <linux/platform_device.h>
+#include <linux/gpio/consumer.h>
 
 #include <sound/soc.h>
 
+struct pcm5102a {
+	struct gpio_desc *mute_gpio;
+};
+
+static int pcm5102a_mute(struct snd_soc_dai *dai, int mute)
+{
+	struct snd_soc_component *component = dai->component;
+	struct pcm5102a *priv = snd_soc_component_get_drvdata(component);
+
+	if (priv->mute_gpio)
+		gpiod_set_value_cansleep(priv->mute_gpio, mute);
+
+	return 0;
+}
+
+static const struct snd_soc_dai_ops pcm5102a_dai_ops = {
+	.digital_mute = pcm5102a_mute,
+};
+
 static struct snd_soc_dai_driver pcm5102a_dai = {
 	.name = "pcm5102a-hifi",
 	.playback = {
@@ -30,6 +50,7 @@
 			   SNDRV_PCM_FMTBIT_S24_LE |
 			   SNDRV_PCM_FMTBIT_S32_LE
 	},
+	.ops = &pcm5102a_dai_ops,
 };
 
 static struct snd_soc_component_driver soc_component_dev_pcm5102a = {
@@ -41,6 +62,23 @@
 
 static int pcm5102a_probe(struct platform_device *pdev)
 {
+	struct device *dev = &pdev->dev;
+	struct pcm5102a *priv;
+
+	priv = devm_kzalloc(dev, sizeof(*priv), GFP_KERNEL);
+	if (priv == NULL)
+		return -ENOMEM;
+	platform_set_drvdata(pdev, priv);
+
+	priv->mute_gpio = devm_gpiod_get_optional(dev, "mute", GPIOD_OUT_HIGH);
+	if (IS_ERR(priv->mute_gpio)) {
+		if (PTR_ERR(priv->mute_gpio) == -EPROBE_DEFER)
+			return -EPROBE_DEFER;
+		dev_info(dev, "failed to get mute GPIO: %ld\n",
+			PTR_ERR(priv->mute_gpio));
+		priv->mute_gpio = NULL;
+	}
+
 	return devm_snd_soc_register_component(&pdev->dev, &soc_component_dev_pcm5102a,
 			&pcm5102a_dai, 1);
 }
