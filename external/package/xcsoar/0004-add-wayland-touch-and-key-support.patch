diff -Naur xcsoar-v6.8.17.orig/src/Event/Poll/WaylandQueue.cpp xcsoar-v6.8.17/src/Event/Poll/WaylandQueue.cpp
--- xcsoar-v6.8.17.orig/src/Event/Poll/WaylandQueue.cpp	2020-09-22 16:46:01.000000000 +0200
+++ xcsoar-v6.8.17/src/Event/Poll/WaylandQueue.cpp	2020-12-10 02:29:31.663431435 +0100
@@ -121,6 +121,127 @@
   WaylandPointerAxis,
 };
 
+static void
+WaylandTouchDown(void *data, struct wl_touch *wl_touch,
+                 uint32_t serial, uint32_t time,
+                 struct wl_surface *surface, int32_t id,
+                 wl_fixed_t surface_x, wl_fixed_t surface_y)
+{
+  auto &queue = *(WaylandEventQueue *)data;
+
+  queue.PointerMotion(Point2D<int>(wl_fixed_to_int(surface_x),
+                                   wl_fixed_to_int(surface_y)));
+
+  queue.PointerButton(true);
+}
+
+static void
+WaylandTouchUp(void *data, struct wl_touch *wl_touch,
+               uint32_t serial, uint32_t time, int32_t id)
+{
+  auto &queue = *(WaylandEventQueue *)data;
+
+  queue.PointerButton(false);
+}
+
+static void
+WaylandTouchMotion(void *data, struct wl_touch *wl_touch,
+                   uint32_t time, int32_t id,
+                   wl_fixed_t surface_x, wl_fixed_t surface_y)
+{
+  auto &queue = *(WaylandEventQueue *)data;
+
+  queue.PointerMotion(Point2D<int>(wl_fixed_to_int(surface_x),
+                                   wl_fixed_to_int(surface_y)));
+}
+
+
+static void
+WaylandTouchFrame(void *data, struct wl_touch *wl_touch)
+{
+}
+
+static void
+WaylandTouchCancel(void *data, struct wl_touch *wl_touch)
+{
+}
+
+static void
+WaylandTouchShape(void *data, struct wl_touch *wl_touch,
+                  int32_t id, wl_fixed_t major, wl_fixed_t minor)
+{
+}
+
+static void
+WaylandTouchOrientation(void *data,
+			    struct wl_touch *wl_touch,
+			    int32_t id,
+			    wl_fixed_t orientation)
+{
+}
+
+static constexpr struct wl_touch_listener touch_listener = {
+  WaylandTouchDown,
+  WaylandTouchUp,
+  WaylandTouchMotion,
+  WaylandTouchFrame,
+  WaylandTouchCancel,
+  WaylandTouchShape,
+  WaylandTouchOrientation
+};
+
+static void
+WaylandKbdKeymap(void *data, struct wl_keyboard *wl_keyboard,
+                 uint32_t format, int32_t fd, uint32_t size)
+{
+}
+
+static void
+WaylandKbdEnter(void *data, struct wl_keyboard *wl_keyboard,
+                uint32_t serial, struct wl_surface *surface,
+                struct wl_array *keys)
+{
+}
+
+static void
+WaylandKbdLeave(void *data, struct wl_keyboard *wl_keyboard,
+                uint32_t serial, struct wl_surface *surface)
+{
+}
+
+static void
+WaylandKbdKey(void *data, struct wl_keyboard *wl_keyboard,
+              uint32_t serial, uint32_t time,
+              uint32_t key, uint32_t state)
+{
+  auto &queue = *(WaylandEventQueue *)data;
+
+  queue.Push(Event(state ? Event::KEY_DOWN : Event::KEY_UP, key));
+}
+
+static void
+WaylandKbdModifiers(void *data, struct wl_keyboard *wl_keyboard,
+                    uint32_t serial, uint32_t mods_depressed,
+                    uint32_t mods_latched, uint32_t mods_locked,
+                    uint32_t group)
+{
+}
+
+static void
+WaylandKbdRepeatInfo(void *data, struct wl_keyboard *wl_keyboard,
+                     int32_t rate, int32_t delay)
+{
+}
+
+static constexpr struct wl_keyboard_listener kbd_listener = {
+  WaylandKbdKeymap,
+  WaylandKbdEnter,
+  WaylandKbdLeave,
+  WaylandKbdKey,
+  WaylandKbdModifiers,
+  WaylandKbdRepeatInfo
+};
+
 WaylandEventQueue::WaylandEventQueue(IOLoop &_io_loop, EventQueue &_queue)
   :io_loop(_io_loop), queue(_queue),
    display(wl_display_connect(nullptr))
@@ -208,7 +329,27 @@
       wl_pointer_destroy(pointer);
   }
 
-  // TODO: support keyboard devices
+  if (has_keyboard) {
+    if (kbd == nullptr) {
+      kbd = wl_seat_get_keyboard(seat);
+      if (kbd != nullptr)
+        wl_keyboard_add_listener(kbd, &kbd_listener, this);
+    }
+  } else {
+    if (kbd != nullptr)
+      wl_keyboard_destroy(kbd);
+  }
+
+  if (has_touch) {
+    if (touch == nullptr) {
+      touch = wl_seat_get_touch(seat);
+      if (touch != nullptr)
+        wl_touch_add_listener(touch, &touch_listener, this);
+    }
+  } else {
+    if (touch != nullptr)
+      wl_touch_destroy(touch);
+  }
 }
 
 inline void
diff -Naur xcsoar-v6.8.17.orig/src/Event/Poll/WaylandQueue.hpp xcsoar-v6.8.17/src/Event/Poll/WaylandQueue.hpp
--- xcsoar-v6.8.17.orig/src/Event/Poll/WaylandQueue.hpp	2020-09-22 16:46:01.000000000 +0200
+++ xcsoar-v6.8.17/src/Event/Poll/WaylandQueue.hpp	2020-12-10 02:11:45.790537907 +0100
@@ -21,8 +21,8 @@
 }
 */
 
-#ifndef XCSOAR_EVENT_X11_EVENT_QUEUE_HPP
-#define XCSOAR_EVENT_X11_EVENT_QUEUE_HPP
+#ifndef XCSOAR_EVENT_WAYLAND_EVENT_QUEUE_HPP
+#define XCSOAR_EVENT_WAYLAND_EVENT_QUEUE_HPP
 
 #include "IO/Async/FileEventHandler.hpp"
 #include "Math/Point2D.hpp"
@@ -45,6 +45,8 @@
   struct wl_compositor *compositor = nullptr;
   struct wl_seat *seat = nullptr;
   struct wl_pointer *pointer = nullptr;
+  struct wl_touch *touch = nullptr;
+  struct wl_keyboard *kbd = nullptr;
   struct wl_shell *shell = nullptr;
 
   Point2D<int> pointer_position = {0, 0};
